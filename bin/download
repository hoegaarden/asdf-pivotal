#!/usr/bin/env bash

[[ -z ${DEBUGX:-} ]] || set -x
set -euo pipefail

# Detect the tool name based on the plugin directory name used by asdf
readonly script_dir="$( cd -P "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
readonly file_name="$(basename "$(dirname "${script_dir}")")"
readonly os=$(uname -s |awk '{print tolower($0)}')
readonly version=$ASDF_INSTALL_VERSION
readonly asdf_download_path=$ASDF_DOWNLOAD_PATH
readonly download_dir="$(mktemp -d -t "asdf_${file_name}_XXXXXXXX")"
trap 'rm -rf "${download_dir}"' EXIT

# To add a product create a case statement matching the file name and add variables as follows
  # github_repo_path
  # is the user/repository as taken from the github URL
  # e.g the part in caps: https://github.com/CONCOURSE/CONCOURSE

  # primary_git_file_name_template
  # the release file link template
  # e.g what appears after the trailing slash: https://github.com/${github_repo_path}/releases/download/
  # For v7.0.0/fly-7.0.0-linux-amd64.tgz would be v${version}/fly-${version}-${os}-amd64.tgz

  # primary_git_file_name_template
  # added as a fall back in case naming standard changes as happened with om 7.8

case $file_name in
  bosh)
    readonly github_repo_path=cloudfoundry/bosh-cli
    readonly primary_git_file_name_template="v${version}/bosh-cli-${version}-${os}-amd64"
    readonly secondary_git_file_name_template=""
    ;;
  credhub)
    readonly github_repo_path=cloudfoundry-incubator/credhub-cli
    readonly primary_git_file_name_template="${version}/credhub-${os}-${version}.tgz"
    readonly secondary_git_file_name_template=""
    ;;
  fly)
    readonly github_repo_path=concourse/concourse
    readonly primary_git_file_name_template="v${version}/fly-${version}-${os}-amd64.tgz"
    readonly secondary_git_file_name_template=""
    ;;
  om)
    readonly github_repo_path=pivotal-cf/om
    readonly primary_git_file_name_template="${version}/om-${os}-amd64-${version}"
    readonly secondary_git_file_name_template="${version}/om-${os}-${version}"
    ;;
  pivnet)
    readonly github_repo_path=pivotal-cf/pivnet-cli
    readonly primary_git_file_name_template="v${version}/pivnet-${os}-amd64-${version}"
    readonly secondary_git_file_name_template=""
    ;;
  *)
    echo "Product ${product_name} is not currently supported"
    exit 1
    ;;
esac

function extract_and_move() {

  local -r downloaded_file=$1

  if [[ $primary_git_file_name_template == *".tar.gz" ]] || [[ $primary_git_file_name_template == *".tgz" ]]; then
    echo "Extracting tar for $file_name"
    tar xvfz $downloaded_file -C $download_dir/ > /dev/null
    move_largest_file $downloaded_file
    
  elif [[ ${primary_git_file_name_template} == *".gz" ]]; then
    echo "Extracting gunzip for $file_name"
    gzip -dc ${downloaded_file} > ${asdf_download_path}/${file_name}
  
  elif [[ ${primary_git_file_name_template} == *".zip" ]]; then
    echo "Extracting zip for $file_name"
    unzip ${downloaded_file} -d ${download_dir} #> /dev/null
    move_largest_file $downloaded_file

  else
    mv $downloaded_file ${asdf_download_path}/${file_name}

  fi
}

function move_largest_file() {

  local -r downloaded_file=$1
  rm $downloaded_file

  # Select the largest extracted file starting with file_name 
  extracted_file="$(ls -d -1 ${download_dir}/${file_name}* |head -n 1)"

  # if tar/zip outputs a directory, select the largest file as the target
  if [[ -d ${extracted_file} ]]; then
    extracted_file=$(ls -Sd -1 ${extracted_file}/* |head -n 1)

  fi

  mv $extracted_file ${asdf_download_path}/${file_name}
}

function download_binary() {
  local git_file_name_template=$1
  local -r github_url="https://github.com/${github_repo_path}/releases/download/$git_file_name_template"
  local -r downloaded_file="${download_dir}/${file_name}_download"

  # Validate HTTP 200 OK on download by checking headers only
  # This enables failure handling whilst also printing download progress
  local return=0 && check="$(curl --fail -L --head --connect-timeout 10 $github_url 2>&1)" || return="$?"
  if [[ $return -eq 0 ]]; then
    echo "Downloading $file_name version $version"
    curl -L --output $downloaded_file $github_url
    extract_and_move $downloaded_file

  elif [ ! -z "$secondary_git_file_name_template" ] && [ ! -f ${download_dir}/secondard_attempt ]; then
    touch ${download_dir}/secondard_attempt
    download_binary $secondary_git_file_name_template

  else
    local -r error_message=$(curl --silent -L $github_url 2>&1)
    echo "ERROR: Failure download $file_name version $version" >&2
    echo "Attempted URL: $github_url" >&2
    echo "Error message: $error_message" >&2
    exit 1

  fi
}

download_binary $primary_git_file_name_template
