#!/usr/bin/env bash

[[ -z ${DEBUGX:-} ]] || set -x
set -euo pipefail

# Detect the tool name based on the plugin directory name used by asdf
readonly script_dir="$( cd -P "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
readonly file_name="$(basename "$(dirname "${script_dir}")")"
readonly os=$(uname -s |awk '{print tolower($0)}')
readonly version=$ASDF_INSTALL_VERSION
readonly asdf_download_path=$ASDF_DOWNLOAD_PATH
readonly download_dir="$(mktemp -d -t "asdf_${file_name}_XXXXXXXX")"
trap 'rm -rf "${download_dir}"' EXIT

. "${script_dir}/../products.inc.sh" "${file_name}" "${version}" "${os}"

function extract_and_move() {
  local -r downloaded_file="$1"

  case "$GIT_FILE_NAME_TEMPLATE" in
    *.tar.gz|*.tgz)
      echo "Extracting tar for ${file_name}"
      tar xvfz "${downloaded_file}" -C "${download_dir}/" > /dev/null
      move_largest_file "${downloaded_file}"
      ;;
    *.gz)
      echo "Extracting gzip for ${file_name}"
      gzip -dc "${downloaded_file}" > "${asdf_download_path}/${file_name}"
      ;;
    *.zip)
      echo "Extracting zip for ${file_name}"
      unzip "${downloaded_file}" -d "${download_dir}" #> /dev/null
      move_largest_file "${downloaded_file}"
      ;;
    *)
      mv "${downloaded_file}" "${asdf_download_path}/${file_name}"
      ;;
  esac
}

function move_largest_file() {
  local -r downloaded_file="$1"
  rm "${downloaded_file}"

  # Select the largest extracted file starting with file_name
  extracted_file="$( ls -d -1 "${download_dir}/${file_name}"* | head -n 1 )"

  # if tar/zip outputs a directory, select the largest file as the target
  if [[ -d ${extracted_file} ]]; then
    extracted_file="$( ls -Sd -1 "${extracted_file}/"* | head -n 1 )"
  fi

  mv "${extracted_file}" "${asdf_download_path}/${file_name}"
}

function download_binary() {
  local -r github_url="https://github.com/${REPO_SLUG}/releases/download/${GIT_FILE_NAME_TEMPLATE}"
  local -r downloaded_file="${download_dir}/${file_name}_download"

  local curl_args=(
    -L -s --fail
    --output "$downloaded_file"
  )
  if [ -n "${GITHUB_API_TOKEN:-}" ]; then
    curl_args+=( -H "Authorization: token ${GITHUB_API_TOKEN}" )
  fi

  local response ret=0
  response="$( curl "${curl_args[@]}" "$github_url" )" || ret=$?

  if [[ $ret -ne 0 ]]; then
    echo "ERROR: Failure to download ${file_name}"
    echo "  Return code: ${ret}"
    echo "  Response: ${response}"
    return $ret
  fi >&2

  extract_and_move "${downloaded_file}"
}

download_binary
